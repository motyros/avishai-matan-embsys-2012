avishl02, matanp01
Avishai Lazar 066641200
Matan Perel 039998570
Exercise 0
README - this file
makefile - a make file
ex1.0 - source we got from the TA
ex0_tag.s - modification of the original assembly to inline the function 'replace'
==================================================================================

-----ANSWERS-----

i. 

	the function modify sorts the array (flavor of selection sort)

ii.
	
	the last instruction been executed is "flag 1" followed by 3 nops.
	flag 1 halts the processor and the nops are for flushing the pipeline (according ARC's reference)
	in addition after the nops there is a jump to the previous "flag 1" (infinity loop) 

iii.

	1.
	replace	: from 0x00010104 to 0x00010120 - 28 bytes
	modify 	: from 0x00010120 to 0x0001017c - 96 bytes
	main	: from 0x0001017c to 0x00010190 - 20 bytes

	2.
	the total size of .text section is 3512 bytes

	3.
	the difference is due to startup code and cleanup code the compiler adds before our main() starts and after
	our main() ends. in addition, there are some padding areas when allignment is needed.

iv.

	out - r5
	in  - r4

v.
	the assembly command asl does Arithmetic Shift Left. all bits move one place (or more in case of 3 parameters)
	to the left and	0 been added to the LSB.

vi.
	1.
	we took from the manual the asl which uses 2 registers and numerical value asl<.f> a,b,u6
	according the manual the machine code is 00101bbb01000000FBBBuuuuuuAAAAAA where
	bbb are lower bits of source register, BBB are upper bits of source register, AAAAAA bits of
	destination registers, u the value of the shift and F is the flag setting.

	in our case: 
		b = r5 -> encoded as 000101 (bbb = 101, BBB = 000)
		a = r0 -> encoded as 000000
		u = 2  -> encoded as 000010
		F = 0
	
	the machine code is: 0010 1101 0100 0000 0000 0000 1000 0000 

	2.
	the hex value of this instruction (taken from the text memory) is 0x00802d40
	and the binary representation is: 0000 0000 1000 0000 0010 1101 0100 0000



	3.
	clearley they are not the same but you can see that if you swith the places of the
	first 16 bits with the second 16 bits you'll get the same value.
	according page 15 in the manual, which states the 32bit instruction bytes presentation it said that
	the ordering of the bytes are Byte2,Byte3,Byte0,Byte1 and this is exactly what we observed.
